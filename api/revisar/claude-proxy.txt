<?php
// api/claude-proxy.php
// Desactivar la visualización de errores en producción por seguridad
// ini_set('display_errors', 0);
// ini_set('display_startup_errors', 0);
// error_reporting(E_ALL);

// Asegúrate de que los errores se registren en los logs del servidor
ini_set('log_errors', 1);
ini_set('error_log', __DIR__ . '/../logs/php-error.log'); // Asegúrate de que este directorio exista y sea escribible
error_reporting(E_ALL); // Registrar todos los errores, pero no mostrarlos

header('Content-Type: application/json');

// --- CORS y orígenes permitidos (reemplazar con tu(s) dominio(s) de producción) ---
$origin = $_SERVER['HTTP_ORIGIN'] ?? '';
$allowed_origins = [
    'http://localhost',
    'http://localhost:8000',
    'https://tu-dominio.com' // <-- REEMPLAZAR por tu dominio real
];

if (in_array($origin, $allowed_origins, true)) {
    header('Access-Control-Allow-Origin: ' . $origin);
} else {
    // Si hay Origin pero no está en la whitelist, rechazar para evitar uso desde orígenes no autorizados
    if (!empty($origin)) {
        http_response_code(403);
        echo json_encode(['error' => 'Origen no permitido']);
        exit;
    }
}

header('Access-Control-Allow-Methods: POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

// Manejar preflight OPTIONS
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

// Solo acepta POST
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['error' => 'Método no permitido']);
    exit;
}

require_once __DIR__ . '/../vendor/autoload.php';

// --- Cargar .env preferiblemente fuera del public webroot ---
$envPaths = [
    // ubicaciones comunes seguras (fuera de htdocs)
    __DIR__ . '/../../.env',                           // un nivel por encima de htdocs
    __DIR__ . '/../../Prueba_private',                 // Desarrollo local (si aplica)
    '/home/' . (isset($_SERVER['USER']) ? $_SERVER['USER'] : 'usuario') . '/private_config',
    __DIR__ . '/../..'                                 // Fallback legacy (no recomendado)
];

$dotenv = null;
foreach ($envPaths as $path) {
    if (file_exists($path . '/.env')) {
        $dotenv = Dotenv\Dotenv::createImmutable($path);
        error_log("Cargando .env desde: $path");
        break;
    }
}

if ($dotenv) {
    $dotenv->load();
} else {
    error_log('ADVERTENCIA: No se encontró archivo .env en ninguna ruta esperada');
}

// Obtener API key de Claude
$apiKey = $_ENV['CLAUDE_API_KEY'] ?? '';
if (empty($apiKey)) {
    echo json_encode(['error' => 'API Key de Claude no configurada']);
    exit;
}

// Leer datos de entrada
$input = json_decode(file_get_contents('php://input'), true);
$message = isset($input['message']) ? htmlspecialchars($input['message'], ENT_QUOTES, 'UTF-8') : '';
$context = isset($input['context']) ? htmlspecialchars($input['context'], ENT_QUOTES, 'UTF-8') : '';
$history = isset($input['history']) ? array_map(function($item) {
    $item['content'] = htmlspecialchars($item['content'], ENT_QUOTES, 'UTF-8');
    return $item;
}, $input['history']) : [];

if (empty($message)) {
    echo json_encode(['error' => 'Mensaje vacío']);
    exit;
}

// Preparar mensajes para Claude
$messages = [];

// Agregar contexto del sistema
if (!empty($context)) {
    $messages[] = [
        'role' => 'user',
        'content' => $context
    ];
    $messages[] = [
        'role' => 'assistant',
        'content' => 'Entendido. Soy el asistente virtual de AstraLumina y responderé según el contexto proporcionado.'
    ];
}

// Agregar historial previo
foreach ($history as $msg) {
    $messages[] = [
        'role' => $msg['role'] === 'user' ? 'user' : 'assistant',
        'content' => $msg['content']
    ];
}

// Agregar mensaje actual
$messages[] = [
    'role' => 'user',
    'content' => $message
];

// Preparar payload para Claude API
$payload = [
    'model' => 'claude-3-sonnet-20240229',
    'max_tokens' => 1000,
    'messages' => $messages
];

// Realizar petición a Claude API
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, 'https://api.anthropic.com/v1/messages');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload));
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    'Content-Type: application/json',
    'x-api-key: ' . $apiKey,
    'anthropic-version: 2023-06-01'
]);
curl_setopt($ch, CURLOPT_TIMEOUT, 30);

$response = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
$error = curl_error($ch);
curl_close($ch);

if ($error) {
    echo json_encode(['error' => 'Error de conexión: ' . $error]);
    exit;
}

if ($httpCode !== 200) {
    echo json_encode(['error' => 'Error de la API de Claude. Código: ' . $httpCode]);
    exit;
}

$data = json_decode($response, true);

if (isset($data['content'][0]['text'])) {
    echo json_encode([
        'success' => true,
        'response' => $data['content'][0]['text']
    ]);
} else {
    echo json_encode(['error' => 'Respuesta inválida de la API']);
}
?>
