<?php
// api/gemini-proxy.php
// Desactivar la visualización de errores en producción por seguridad
// ini_set('display_errors', 0);
// ini_set('display_startup_errors', 0);
// error_reporting(E_ALL);

// Asegúrate de que los errores se registren en los logs del servidor
ini_set('log_errors', 1);
ini_set('error_log', __DIR__ . '/../logs/php-error.log'); // Asegúrate de que este directorio exista y sea escribible
error_reporting(E_ALL); // Registrar todos los errores, pero no mostrarlos

header('Content-Type: application/json');

// --- CORS y orígenes permitidos (reemplazar con tu(s) dominio(s) de producción) ---
$origin = $_SERVER['HTTP_ORIGIN'] ?? '';
$allowed_origins = [
    'http://localhost',
    'http://localhost:8000',
    'https://tu-dominio.com' // <-- REEMPLAZAR por tu dominio real
];

if (in_array($origin, $allowed_origins, true)) {
    header('Access-Control-Allow-Origin: ' . $origin);
} else {
    // Si hay Origin pero no está en la whitelist, rechazar para evitar uso desde orígenes no autorizados
    if (!empty($origin)) {
        http_response_code(403);
        echo json_encode(['error' => 'Origen no permitido']);
        exit;
    }
}

header('Access-Control-Allow-Methods: POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

// Manejar preflight OPTIONS
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

// Solo acepta POST
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['error' => 'Método no permitido']);
    exit;
}

require_once __DIR__ . '/../vendor/autoload.php';

// --- Cargar .env preferiblemente fuera del public webroot ---
$envPaths = [
    // ubicaciones comunes seguras (fuera de htdocs)
    __DIR__ . '/../../.env',                           // un nivel por encima de htdocs
    __DIR__ . '/../../Prueba_private',                 // Desarrollo local (si aplica)
    '/home/' . (isset($_SERVER['USER']) ? $_SERVER['USER'] : 'usuario') . '/private_config',
    __DIR__ . '/../..'                                 // Fallback legacy (no recomendado)
];

$dotenv = null;
foreach ($envPaths as $path) {
    if (file_exists($path . '/.env')) {
        $dotenv = Dotenv\Dotenv::createImmutable($path);
        error_log("Cargando .env desde: $path");
        break;
    }
}

if ($dotenv) {
    $dotenv->load();
} else {
    error_log('ADVERTENCIA: No se encontró archivo .env en ninguna ruta esperada');
}

// Leer datos de entrada
$input = json_decode(file_get_contents('php://input'), true);
$message = isset($input['message']) ? htmlspecialchars($input['message'], ENT_QUOTES, 'UTF-8') : '';
$context = isset($input['context']) ? htmlspecialchars($input['context'], ENT_QUOTES, 'UTF-8') : '';
$history = isset($input['history']) ? array_map(function($item) {
    $item['content'] = htmlspecialchars($item['content'], ENT_QUOTES, 'UTF-8');
    return $item;
}, $input['history']) : [];

if (empty($message)) {
    echo json_encode(['error' => 'Mensaje vacío']);
    exit;
}

// Obtener API key de Gemini desde .env
$apiKey = $_ENV['GEMINI_API_KEY'] ?? null;

if (empty($apiKey)) {
    error_log('GEMINI_API_KEY no configurada en el archivo .env');
    error_log('Variables disponibles en $_ENV: ' . print_r(array_keys($_ENV), true));
    http_response_code(500);
    echo json_encode(['error' => 'Servidor no configurado correctamente']);
    exit;
}

// No loggear información sensible de la API key
error_log('API Key cargada correctamente');
$url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=$apiKey";

// Construir prompt completo
$fullPrompt = $context . "\n\n";

// Agregar historial
foreach ($history as $msg) {
    $role = $msg['role'] === 'user' ? 'Usuario' : 'Asistente';
    $fullPrompt .= "$role: " . $msg['content'] . "\n";
}

$fullPrompt .= "Usuario: " . $message . "\nAsistente:";

$body = json_encode([
    'contents' => [[ 'parts' => [[ 'text' => $fullPrompt ]] ]],
    'generationConfig' => [
        'temperature' => 0.8,
        'topK' => 40,
        'topP' => 0.95,
        'maxOutputTokens' => 1000
    ]
]);

$ch = curl_init($url);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    'Content-Type: application/json',
    'x-goog-api-key: ' . $apiKey
]);
curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
curl_setopt($ch, CURLOPT_TIMEOUT, 30);
$response = curl_exec($ch);
$httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
$error = curl_error($ch);
curl_close($ch);

if ($error) {
    echo json_encode(['error' => 'Error de conexión: ' . $error]);
    exit;
}

if ($httpcode !== 200) {
    echo json_encode(['error' => 'Error de la API de Gemini. Código: ' . $httpcode]);
    exit;
}

$responseData = json_decode($response, true);
error_log('Respuesta de la API de Gemini: ' . print_r($responseData, true));

if (isset($responseData['candidates'][0]['content']['parts'][0]['text'])) {
    echo json_encode([
        'success' => true,
        'response' => $responseData['candidates'][0]['content']['parts'][0]['text']
    ]);
} else {
    echo json_encode(['error' => 'Respuesta inválida de la API']);
}
